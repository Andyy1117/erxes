(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4434],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return p},kt:function(){return u}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=r.createContext({}),c=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(i.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(t),u=o,k=m["".concat(i,".").concat(u)]||m[u]||d[u]||a;return t?r.createElement(k,s(s({ref:n},p),{},{components:t})):r.createElement(k,s({ref:n},p))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=m;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l.mdxType="string"==typeof e?e:o,s[1]=l;for(var c=2;c<a;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},76375:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return s},metadata:function(){return l},toc:function(){return i},default:function(){return p}});var r=t(74034),o=t(79973),a=(t(67294),t(3905)),s={id:"docker",title:"Docker"},l={unversionedId:"installation/docker",id:"installation/docker",isDocsHomePage:!1,title:"Docker",description:"This steps explain how to install Erxes on Docker Hub, to do it, follow the instructions.",source:"@site/docs/installation/docker.md",sourceDirName:"installation",slug:"/installation/docker",permalink:"/installation/docker",editUrl:"https://github.com/erxes/erxes/edit/develop/docs/docs/installation/docker.md",version:"current",lastUpdatedBy:"Ariunbold",lastUpdatedAt:1638275703,formattedLastUpdatedAt:"11/30/2021",frontMatter:{id:"docker",title:"Docker"},sidebar:"docs",previous:{title:"Troubleshooting Ubuntu Installation",permalink:"/installation/ubuntu-troubleshooting"},next:{title:"Upgrade",permalink:"/installation/upgrade"}},i=[{value:"Prerequisites",id:"prerequisites",children:[{value:"Install docker",id:"install-docker",children:[]},{value:"Install docker compose",id:"install-docker-compose",children:[]}]},{value:"Install erxes",id:"install-erxes",children:[{value:"Default ports",id:"default-ports",children:[]},{value:"docker-compose.yml file",id:"docker-composeyml-file",children:[]}]}],c={toc:i};function p(e){var n=e.components,t=(0,o.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This steps explain how to install Erxes on Docker Hub, to do it, follow the instructions."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://hub.docker.com/u/erxes/"},"erxes on docker hub")),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("h3",{id:"install-docker"},"Install docker"),(0,a.kt)("p",null,"(Ubuntu variant)"),(0,a.kt)("h4",{id:"uninstall-old-versions"},"Uninstall old versions"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"sudo apt-get remove docker docker-engine docker.io containerd runc")),(0,a.kt)("h4",{id:"set-up-the-repository"},"SET UP THE REPOSITORY"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Update the apt package index:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"sudo apt-get update\n")),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"Install packages to allow apt to use a repository over HTTPS:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"sudo apt-get install \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    gnupg-agent \\\n    software-properties-common\n")),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},"Add Docker\u2019s official GPG key:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n")),(0,a.kt)("ol",{start:4},(0,a.kt)("li",{parentName:"ol"},"Use the following command to set up the stable repository.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},'sudo add-apt-repository \\\n   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n   $(lsb_release -cs) \\\n   stable"\n')),(0,a.kt)("h4",{id:"install-docker-ce"},"INSTALL DOCKER CE"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Update the ",(0,a.kt)("inlineCode",{parentName:"li"},"apt")," package index.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"sudo apt-get update\n")),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"Install the ",(0,a.kt)("em",{parentName:"li"},"latest version")," of Docker CE and containerd.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"sudo apt-get install docker-ce docker-ce-cli containerd.io\n")),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},"Verify that Docker CE is installed correctly by running the ",(0,a.kt)("inlineCode",{parentName:"li"},"hello-world")," image.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"sudo docker run hello-world\n")),(0,a.kt)("ol",{start:4},(0,a.kt)("li",{parentName:"ol"},"Optional: If you would like to use Docker as a non-root user, you should now consider adding your user to the \u201cdocker\u201d group with something like:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"sudo usermod -aG docker your-user\n")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Don't forget to restart shell to take effect.")),(0,a.kt)("p",null,"Official Docker documentation: ",(0,a.kt)("a",{parentName:"p",href:"https://docs.docker.com/install/"},"https://docs.docker.com/install/")),(0,a.kt)("h3",{id:"install-docker-compose"},"Install docker compose"),(0,a.kt)("p",null,"(Linux variant)"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Run this command to download the current stable release of Docker Compose:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},'sudo curl -L "https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose\n')),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"Apply executable permissions to the binary:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"sudo chmod +x /usr/local/bin/docker-compose\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note"),": If the command ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose")," fails after installation, check your path. You can also create a symbolic link to ",(0,a.kt)("inlineCode",{parentName:"p"},"/usr/bin")," or any other directory in your path."),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},"Test the installation.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"$ docker-compose --version\ndocker-compose version 1.26.2, build 1110ad01\n")),(0,a.kt)("p",null,"Official Docker compose documentation: ",(0,a.kt)("a",{parentName:"p",href:"https://docs.docker.com/compose/install/"},"https://docs.docker.com/compose/install/")),(0,a.kt)("h2",{id:"install-erxes"},"Install erxes"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Go to your desired location")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"  cd 'path_to'\n")),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"Save the ",(0,a.kt)("inlineCode",{parentName:"li"},"docker-compose.yml")," file."),(0,a.kt)("li",{parentName:"ol"},"Run the following command in your shell:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir elasticsearch-data && chown 1000:1000 elasticsearch-data\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"elasticsearch container migth fail to start due to permission")),(0,a.kt)("ol",{start:4},(0,a.kt)("li",{parentName:"ol"},"Run the following to start containers")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose up -d\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"To stop the containers:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose down\n")),(0,a.kt)("ol",{start:5},(0,a.kt)("li",{parentName:"ol"},"Now you may visit ",(0,a.kt)("inlineCode",{parentName:"li"},"localhost:3000")," and log in with your admin account.")),(0,a.kt)("h3",{id:"default-ports"},"Default ports"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Must be published to host machine network")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"erxes main frontend app will run on port 3000"),(0,a.kt)("li",{parentName:"ul"},"erxes-widgets will run on port 3200"),(0,a.kt)("li",{parentName:"ul"},"erxes-api will run on port 3300"),(0,a.kt)("li",{parentName:"ul"},"erxes-integrations will run on port 3400"),(0,a.kt)("li",{parentName:"ul"},"erxes-dashboard-api will run on port 4300"),(0,a.kt)("li",{parentName:"ul"},"erxes-dashboard-front will run on port 4400")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Should not published to host machine network, only used internally")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"erxes-api (cron) will run on port 3600"),(0,a.kt)("li",{parentName:"ul"},"erxes-api (worker) will run on port 3700"),(0,a.kt)("li",{parentName:"ul"},"erxes-logger will run on port 3800"),(0,a.kt)("li",{parentName:"ul"},"redis server will run on port 6379"),(0,a.kt)("li",{parentName:"ul"},"mongodb server will run on port 27017"),(0,a.kt)("li",{parentName:"ul"},"rabbitmq server will run on port 5672")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"If these ports aren't available for you, you can always change it. But don't forget to change related ENV variables locate in docker-compose.yml file.")),(0,a.kt)("h3",{id:"docker-composeyml-file"},"docker-compose.yml file"),(0,a.kt)("aside",{class:"notice"},(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note:")," Following ENVs are configured for localhost only, if you want to use erxes for certain domain please replace it with the domain.\nAll erxes version have to changed the latest version.\nThe latest version ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/erxes/erxes/releases"},(0,a.kt)("strong",{parentName:"a"},"release"))," source code.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'version: "2.4"\nservices:\n  erxes:\n    image: erxes/erxes:master\n    container_name: erxes\n    restart: unless-stopped\n    environment:\n      REACT_APP_CDN_HOST: http://localhost:3200\n      REACT_APP_API_URL: http://localhost:3300\n      REACT_APP_API_SUBSCRIPTION_URL: ws://localhost:3300/subscriptions\n      REACT_APP_DASHBOARD_URL: http://localhost:4200\n      NGINX_HOST: localhost\n    ports:\n      - "127.0.0.1:3000:80"\n    networks:\n      - erxes-net\n\n  erxes-api:\n    image: erxes/erxes-api:master\n    container_name: erxes-api\n    restart: unless-stopped\n    environment:\n      # erxes-api\n      PORT: "3300"\n      NODE_ENV: production\n      HTTPS: "true"\n      DEBUG: "erxes-api:*"\n      # public urls\n      MAIN_APP_DOMAIN: http://localhost:3000\n      # non public urls\n      LOGS_API_DOMAIN: http://erxes-logger:3800\n      ENGAGES_API_DOMAIN: http://erxes-engages:3900\n      WORKERS_API_DOMAIN: http://erxes-workers:3700\n      # MongoDB\n      MONGO_URL: mongodb://mongo/erxes\n      # Elasticsearch\n      ELASTICSEARCH_URL: http://elasticsearch:9200\n      # Redis\n      REDIS_HOST: "redis"\n      REDIS_PORT: "6379"\n      REDIS_PASSWORD: "erxes"\n      # RabbitMQ\n      RABBITMQ_HOST: "amqp://rabbitmq:5672/erxes"\n      JWT_TOKEN_SECRET: "erxes"\n      # Email verifier\n      EMAIL_VERIFIER_ENDPOINT: "https://email-verifier.erxes.io"\n      # Dashboard domain\n      DASHBOARD_DOMAIN: http://localhost:4200\n      HELPERS_DOMAIN: https://helper.erxes.io\n    ports:\n      - "127.0.0.1:3300:3300"\n    networks:\n      - erxes-net\n\n  erxes-crons:\n    image: erxes/erxes-api:master\n    container_name: erxes-crons\n    entrypoint: ["node", "--max_old_space_size=8192", "dist/cronJobs"]\n    restart: unless-stopped\n    environment:\n      # erxes-crons\n      PORT_CRONS: "3600"\n      NODE_ENV: production\n      PROCESS_NAME: crons\n      DEBUG: "erxes-crons:*"\n      # MongoDB\n      MONGO_URL: mongodb://mongo/erxes\n      # RabbitMQ\n      RABBITMQ_HOST: "amqp://rabbitmq:5672/erxes"  \n      ELASTICSEARCH_URL: http://elasticsearch:9200\n    ports:\n      - "127.0.0.1:3600:3600"\n    networks:\n      - erxes-net\n\n  erxes-workers:\n    image: erxes/erxes-api:master \n    container_name: erxes-workers\n    entrypoint: ["node", "--max_old_space_size=8192", "--experimental-worker", "dist/workers"]\n    restart: unless-stopped\n    environment:\n      # erxes-workers\n      PORT_WORKERS: "3700"\n      NODE_ENV: production\n      DEBUG: "erxes-workers:*"\n      # MongoDB\n      MONGO_URL: mongodb://mongo/erxes\n      # Redis\n      REDIS_HOST: "redis"\n      REDIS_PORT: "6379"\n      REDIS_PASSWORD: "erxes"\n      JWT_TOKEN_SECRET: "erxes"\n      # RabbitMQ\n      RABBITMQ_HOST: "amqp://rabbitmq:5672/erxes"\n      # Elasticsearch\n      ELASTICSEARCH_URL: http://elasticsearch:9200\n    ports:\n      - "127.0.0.1:3700:3700"\n    networks:\n      - erxes-net\n\n  erxes-widgets:\n    image: erxes/erxes-widgets:master\n    container_name: erxes-widgets\n    restart: unless-stopped\n    environment:\n      # erxes widgets\n      PORT: "3200"\n      ROOT_URL: http://localhost:3200\n      API_URL: http://localhost:3300\n      API_SUBSCRIPTIONS_URL: ws://localhost:3300/subscriptions\n    ports:\n      - "127.0.0.1:3200:3200"\n    networks:\n      - erxes-net\n\n  erxes-integrations:\n    image: erxes/erxes-integrations:master\n    container_name: erxes-integrations\n    restart: unless-stopped\n    environment:\n      PORT: "3400"\n      NODE_ENV: production\n      DEBUG: "erxes-integrations:*"\n      # public urls\n      DOMAIN: http://localhost:3400\n      MAIN_APP_DOMAIN: http://localhost\n      MAIN_API_DOMAIN: http://localhost:3300\n      # MongoDB\n      MONGO_URL: mongodb://mongo/erxes\n      # RabbitMQ\n      RABBITMQ_HOST: "amqp://rabbitmq:5672/erxes"\n      # Redis\n      REDIS_HOST: "redis"\n      REDIS_PORT: "6379"\n      REDIS_PASSWORD: "erxes"\n      # Dashboard\n      ENDPOINT_URL: https://enterprise.erxes.io\n    ports:\n      - "127.0.0.1:3400:3400"\n    networks:\n      - erxes-net\n   \n  erxes-logger:\n    image: erxes/erxes-logger:master\n    container_name: erxes-logger\n    restart: unless-stopped\n    environment:\n      PORT: "3800"\n      DEBUG: "erxes-logs:*"\n      # MongoDB\n      MONGO_URL: mongodb://mongo/erxes\n      # RabbitMQ\n      RABBITMQ_HOST: "amqp://rabbitmq:5672/erxes"\n    networks:\n      - erxes-net\n\n  erxes-engages:\n    image: erxes/erxes-engages-email-sender:master\n    container_name: erxes-engages\n    restart: unless-stopped\n    environment:\n      PORT: "3900"\n      NODE_ENV: production\n      DEBUG: "erxes-engages:*"\n      # public urls\n      MAIN_API_DOMAIN: http://localhost:3300\n      # MongoDB\n      MONGO_URL: mongodb://mongo/erxes\n      # Redis\n      REDIS_HOST: "redis"\n      REDIS_PORT: "6379"\n      REDIS_PASSWORD: "erxes"\n      # RabbitMQ\n      RABBITMQ_HOST: "amqp://rabbitmq:5672/erxes"\n    networks:\n      - erxes-net\n\n  erxes-elksyncer:\n    image: erxes/erxes-elksyncer:master\n    container_name: erxes-elksyncer\n    restart: unless-stopped\n    environment:\n      DB_NAME: "erxes"\n      ELASTICSEARCH_URL: http://elasticsearch:9200\n      MONGO_URL: mongodb://mongo/erxes\n    volumes:\n        - ./mongoConnectorLog:/var/log/mongo-connector\n    networks:\n      - erxes-net\n\n  erxes-dashboard-front:\n    image: erxes/erxes-dashboard-front:master\n    container_name: erxes-dashboard-front\n    restart: unless-stopped\n    ports:\n      - "127.0.0.1:4200:80"\n    environment:\n      PORT: "4200"\n      REACT_APP_API_URL: http://localhost:3300\n      REACT_APP_API_SUBSCRIPTION_URL: ws://localhost:3300/subscriptions\n      REACT_APP_DASHBOARD_API_URL: http://localhost:4300\n      NGINX_HOST: localhost\n    networks:\n      - erxes-net\n\n  erxes-dashboard-api:\n    image: erxes/erxes-dashboard-api:master\n    container_name: erxes-dashboard-api\n    restart: unless-stopped\n    ports:\n      - "127.0.0.1:4300:4300"\n    environment:\n      DASHBOARD_DOMAIN: http://localhost:4300\n      NODE_ENV: production\n      PORT: "4300"\n      CUBEJS_DB_TYPE: elasticsearch\n      CUBEJS_DB_URL: http://elasticsearch:9200\n      CUBEJS_URL: http://localhost:4300\n      CUBEJS_API_SECRET: "erxes"\n      REDIS_URL: redis://redis:6379\n      REDIS_PASSWORD: "erxes"\n      DB_NAME: "erxes"\n    networks:\n      - erxes-net\n\n  mongo:\n    hostname: mongo\n    image: mongo:4.0.20\n    container_name: mongo\n    ports:\n      - "127.0.0.1:27017:27017"\n    healthcheck:\n      test: test $$(echo "rs.initiate().ok || rs.status().ok" | mongo --quiet) -eq 1\n      interval: 2s\n      timeout: 2s\n      retries: 200\n    command: ["--replSet", "rs0", "--bind_ip_all"]\n    # All erxes database will be saved into mounted directory below. <<IF YOU DELETE THIS MOUNTED DIRECTORY ALL OF YOUR ERXES DATA WILL BE LOST SO BE CAUTIOUS>>\n    volumes:\n      - ./data/db:/data/db\n    networks:\n      - erxes-net\n\n  redis:\n    image: \'redis\'\n    container_name: redis\n    ports:\n      - "127.0.0.1:6379:6379"\n    networks:\n      - erxes-net\n    command: redis-server --requirepass erxes\n\n  rabbitmq:\n    image: rabbitmq:3.7.17-management\n    container_name: rabbitmq\n    restart: unless-stopped\n    hostname: rabbitmq\n    ports:\n      - "127.0.0.1:15672:15672"\n      - "127.0.0.1:5672:5672"\n    networks:\n      - erxes-net\n    # RabbitMQ data will be saved into ./rabbitmq-data folder.\n    volumes:\n      - ./rabbitmq-data:/var/lib/rabbitmq\n\n  elasticsearch:\n    image: "docker.elastic.co/elasticsearch/elasticsearch:7.8.0"\n    container_name: "elasticsearch"\n    environment:\n      - discovery.type=single-node\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n      nofile:\n        soft: 32768\n        hard: 65536\n    ports:\n      - "127.0.0.1:9200:9200"\n    networks:\n      - erxes-net\n    volumes:\n      - ./elasticsearchData:/usr/share/elasticsearch/data\n\n  kibana:\n    image: "docker.elastic.co/kibana/kibana:7.5.2"\n    container_name: "kibana"\n    depends_on:\n      - "elasticsearch"\n    ports:\n      - "127.0.0.1:5601:5601"\n    networks:\n      - erxes-net\nnetworks:\n  erxes-net:\n    driver: bridge \n')),(0,a.kt)("p",null,"If you have trouble running erxes docker images, feel free to open ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/erxes/erxes/issues"},"issue"),". Also you can ask any question related to docker installation in our ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/erxes/erxes/discussions"},"discussion"),". Our DevOps team will help you to solve your problem."))}p.isMDXComponent=!0}}]);